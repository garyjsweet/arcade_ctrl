// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// QuadEncoder //
// ----------- //

#define QuadEncoder_wrap_target 0
#define QuadEncoder_wrap 8

static const uint16_t QuadEncoder_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0x00c4, //  1: jmp    pin, 4                     
    0x0043, //  2: jmp    x--, 3                     
    0x0007, //  3: jmp    7                          
    0xa029, //  4: mov    x, !x                      
    0x0046, //  5: jmp    x--, 6                     
    0xa029, //  6: mov    x, !x                      
    0x20a0, //  7: wait   1 pin, 0                   
    0x0000, //  8: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program QuadEncoder_program = {
    .instructions = QuadEncoder_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config QuadEncoder_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + QuadEncoder_wrap_target, offset + QuadEncoder_wrap);
    return c;
}

static inline void EncoderProgramInit(PIO pio, uint sm, uint offset, uint a_pin, uint b_pin)
{
    pio_sm_config cfg = QuadEncoder_program_get_default_config(offset);
    sm_config_set_in_pins(&cfg, b_pin);
    sm_config_set_jmp_pin(&cfg, a_pin);
    sm_config_set_in_shift(&cfg, false, true, 32);
    pio_sm_init(pio, sm, offset, &cfg);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

