;
; The MIT License (MIT)
;
; Copyright (c) 2023 Gary Sweet
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
; THE SOFTWARE.
;

.program QuadEncoder
main:
    wait 1 pin 0 ; Wait B high
    jmp pin, increment
decrement:
    jmp x--, next ; Note: jump is conditional on x!=0 so always jump to next instr
next:
    jmp wait_b_low
increment:
    mov x, ~x
    jmp x--, negate
negate:
    mov x, ~x
wait_b_low:
    mov y, x     ; Latch x into y (we only read y from outside)
                 ; This should guarantee that we never see partial calculations
    wait 0 pin 0 ; Wait b low
    jmp main

% c-sdk {
static inline void EncoderProgramInit(PIO pio, uint sm, uint offset, uint pinA, uint pinB)
{
    pio_sm_config cfg = QuadEncoder_program_get_default_config(offset);

    sm_config_set_jmp_pin(&cfg, pinA);
    sm_config_set_in_pins(&cfg, pinB);
    sm_config_set_in_shift(&cfg, /*shift_right=*/false, /*autopush=*/true, 32);
    pio_sm_init(pio, sm, offset, &cfg);
    pio_sm_set_enabled(pio, sm, true);
}
%}